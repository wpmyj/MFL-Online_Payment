<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Ke02_NeoWay_Gprs_v0.1]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Ke02_NeoWay_Gprs_v0.1</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Dec 28 16:43:25 2016
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ModuleBack_Code &rArr; ReceiveTCP_Date &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[21]">ACMP1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1b]">ADC0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[5]">Adc_FifoIsr</a> from adcapp.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[5]">Adc_FifoIsr</a> from adcapp.o(.text) referenced from init.o(.text)
 <LI><a href="#[1d]">FTM0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1e]">FTM1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1f]">FTM2_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[11]">FTMRH_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[27]">ICS_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[13]">IRQ_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[24]">KBI0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[25]">KBI1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[12]">LVD_LVW_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[22]">PIT_CH0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[23]">PIT_CH1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[7]">PIT_Ch0Isr</a> from pit.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[2f]">PIT_Task</a> from init.o(.text) referenced from init.o(.text)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[c]">Reserved16_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[d]">Reserved17_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[e]">Reserved18_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[f]">Reserved19_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[10]">Reserved20_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[15]">Reserved25_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[26]">Reserved42_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[29]">Reserved45_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2a]">Reserved46_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2b]">Reserved47_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke02z2.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[6]">Rtc_Isr</a> from rtcapp.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from start.o(.text) referenced from startup_mke02z2.o(.text)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2]">UART0_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[3]">UART1_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[1a]">UART2_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[4]">UART2_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[30]">UART_HandleInt</a> from uartapp.o(.text) referenced 2 times from neoway_gprs.o(.text)
 <LI><a href="#[28]">Watchdog_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mke02z2.o(.text)
 <LI><a href="#[1]">default_isr</a> from vectors.o(.text) referenced 40 times from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[31]">fputc</a> from io.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[119]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[34]"></a>assert_failed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinToggle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[36]"></a>in_char</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>

<P><STRONG><a name="[38]"></a>out_char</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[11e]"></a>char_present</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[1]"></a>default_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[11f]"></a>abort_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>hard_fault_handler_c</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
<LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[3c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[3d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FTMRH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>KBI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>KBI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Reserved47_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, start.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DisableWDOGEnableUpdate
</UL>

<P><STRONG><a name="[122]"></a>cpu_identify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, start.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>flash_identify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, start.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; WDOG_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[124]"></a>RTC_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>RTC_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[46]"></a>RTC_Isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Empty_Par
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rec1ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBack_Code
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4c]"></a>isalnum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4d]"></a>isdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4e]"></a>isupper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[12d]"></a>strcasecmp</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>strncasecmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>strtoul</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isupper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isalnum
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[50]"></a>strlen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[4f]"></a>strcat</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = strcat &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ip
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[51]"></a>strncat</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[12f]"></a>strcpy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>strncpy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>strcmp</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>strncmp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>memcpy</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>memset</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>print_sys_log</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_sys_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_ReadID
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetStatus
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[55]"></a>UART_InitPrint</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[57]"></a>sysinit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Trim
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitPrint
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[5b]"></a>end_test</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sysinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[60]"></a>ADC_SetFifoLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5f]"></a>ADC_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5e]"></a>ADC_SelectClockDivide</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SelectClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5d]"></a>ADC_SelectClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5c]"></a>ADC_Init</STRONG> (Thumb, 292 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init &rArr; ADC_SelectClockDivide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClockDivide
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetFifoLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[62]"></a>ADC_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollRead
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AdcBuff
</UL>

<P><STRONG><a name="[61]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[63]"></a>ADC_PollRead</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[be]"></a>ADC_SetCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[135]"></a>ADC_VrefSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>ADC_Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>FLASH_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[67]"></a>FLASH_LaunchCMD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetUserMarginLevel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyBackdoorKey
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseSector
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Program1Byte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseVerifySection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOnce
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOnce
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifyAll
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifySection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifyBlock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseBlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unsecure
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramUpto4Bytes
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
</UL>

<P><STRONG><a name="[66]"></a>FLASH_Program1LongWord</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
</UL>

<P><STRONG><a name="[68]"></a>FLASH_Program2LongWords</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
</UL>

<P><STRONG><a name="[69]"></a>FLASH_Program</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
</UL>

<P><STRONG><a name="[6a]"></a>FLASH_EraseSector</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[6b]"></a>EEPROM_ProgramUpto4Bytes</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROM_ProgramUpto4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Program
</UL>

<P><STRONG><a name="[6c]"></a>EEPROM_Program</STRONG> (Thumb, 94 bytes, Stack size 36 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EEPROM_Program &rArr; EEPROM_ProgramUpto4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramUpto4Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayIp_Init
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_Unsecure</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[6e]"></a>FLASH_EraseBlock</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_EraseVerifyBlock</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[70]"></a>FLASH_EraseVerifySection</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[71]"></a>FLASH_EraseVerifyAll</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[72]"></a>FLASH_EraseAll</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[73]"></a>FLASH_ProgramOnce</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[74]"></a>FLASH_ReadOnce</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[75]"></a>EEPROM_EraseVerifySection</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[76]"></a>EEPROM_Program1Byte</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[77]"></a>EEPROM_EraseSector</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEPROM_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayIp_Init
</UL>

<P><STRONG><a name="[137]"></a>EEPROM_Program1Byte_NoWait</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>EEPROM_ProgramUpto4Bytes_NoWait</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>EEPROM_EraseSector_NoWait</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>FLASH_EraseBlock_NoWait</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>FLASH_VerifyBackdoorKey</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[79]"></a>FLASH_SetUserMarginLevel</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_CheckErrStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>GPIO_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_Init</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_Toggle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_Read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_Write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_PinInit</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
</UL>

<P><STRONG><a name="[80]"></a>GPIO_PinToggle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinToggle &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_HeartbeatEvent
</UL>

<P><STRONG><a name="[81]"></a>GPIO_PinSet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Module
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Module
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[82]"></a>GPIO_PinClear</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Module
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
</UL>

<P><STRONG><a name="[85]"></a>ICS_SetClkDivider</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[84]"></a>OSC_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FEE
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FBE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[83]"></a>FEI_to_FEE</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[13c]"></a>FEI_to_FBI</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>FEI_to_FBE</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[87]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FBE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[88]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[89]"></a>FEE_to_FEI</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[8b]"></a>FEE_to_FBI</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[13d]"></a>FEE_to_FBE</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>FBI_to_FBE</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[8d]"></a>FBI_to_FEE</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[13e]"></a>FBI_to_FBILP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>FBI_to_FEI</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>FBE_to_FBI</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[140]"></a>FBE_to_FEE</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>FBE_to_FEI</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[141]"></a>FBE_to_FBELP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>FBELP_to_FBE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>FBILP_to_FBI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>ICS_Trim</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[5a]"></a>ICS_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[144]"></a>ICS_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>OSC_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>PIT_SetLoadVal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[90]"></a>PIT_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetLoadVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Init
</UL>

<P><STRONG><a name="[bb]"></a>PIT_SetCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Init
</UL>

<P><STRONG><a name="[94]"></a>PIT_DeInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisableChain
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisableInt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetLoadVal
</UL>

<P><STRONG><a name="[7]"></a>PIT_Ch0Isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_Ch0Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[99]"></a>PIT_Ch1Isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>

<P><STRONG><a name="[59]"></a>SIM_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, sim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[146]"></a>SIM_SetClockGating</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sim.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>SIM_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>

<P><STRONG><a name="[54]"></a>SIM_ReadID</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>

<P><STRONG><a name="[56]"></a>UART_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitPrint
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnetBoard_Init
</UL>

<P><STRONG><a name="[37]"></a>UART_GetChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_char
</UL>

<P><STRONG><a name="[39]"></a>UART_PutChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendDate
</UL>

<P><STRONG><a name="[9a]"></a>UART_SetBaudrate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[9b]"></a>UART_EnableInterrupt</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[9c]"></a>UART_DisableInterrupt</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[9e]"></a>UART_GetFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>

<P><STRONG><a name="[9d]"></a>UART_CheckFlag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_CheckFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[c9]"></a>UART_SendWait</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendWait
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMaster_Date
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendDate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
</UL>

<P><STRONG><a name="[147]"></a>UART_ReceiveWait</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>UART_WaitTxComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>UART_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnetBoard_Init
</UL>

<P><STRONG><a name="[2]"></a>UART0_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[3]"></a>UART1_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[4]"></a>UART2_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[41]"></a>WDOG_Disable</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDOG_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[40]"></a>WDOG_DisableWDOGEnableUpdate</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[149]"></a>WDOG_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>WDOG_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_Init
</UL>

<P><STRONG><a name="[14a]"></a>WDOG_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>WDOG_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>WDOG_EnableUpdate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>WDOG_DisableUpdate</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>Rtc_Event</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rtc_Event &rArr; Gprs_1SEvent &rArr; Gprs_FirstOpenEvent &rArr; Send_FirstOpen &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rtc1s
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_1SEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; ModuleBack_Code &rArr; ReceiveTCP_Date &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMaster_KeyValue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot_Module
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBack_Code
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gprs_Device
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_StartCodeEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnetBoard_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Event
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14d]"></a>UART_SendInt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uartapp.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>UART_ReceiveInt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uartapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_ReceiveInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnetBoard_Init
</UL>

<P><STRONG><a name="[30]"></a>UART_HandleInt</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, uartapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_HandleInt &rArr; RecMaster_Uart &rArr; SendMaster_Date &rArr; UART_SendWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecMaster_Uart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_UartRec
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsRxBuffFull
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTxBuffEmpty
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableTxBuffEmptyInt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteDataReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadDataReg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>
<BR>[Address Reference Count : 2]<UL><LI> connet_master.o(.text)
<LI> neoway_gprs.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>Adc_FifoIsr</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, adcapp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
<LI> init.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>Read_AdcBuff</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, adcapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_AdcBuff &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Isr
</UL>

<P><STRONG><a name="[6]"></a>Rtc_Isr</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtcapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rtc_Isr &rArr; Read_AdcBuff &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rtc1ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AdcBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[b8]"></a>Wdog_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wdog_Init &rArr; WDOG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[2f]"></a>PIT_Task</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, init.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>Pit_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pit_Init &rArr; PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[bd]"></a>Adc_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc_Init &rArr; ADC_Init &rArr; ADC_SelectClockDivide
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetCallBack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[bf]"></a>Rtc_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Rtc_Init &rArr; RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[c1]"></a>Uart_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[c0]"></a>Gpio_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gpio_Init &rArr; GPIO_PinInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[a2]"></a>Board_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Board_Init &rArr; sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>NeoWayBoard_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NeoWayBoard_Init &rArr; NeoWayIp_Init &rArr; EEPROM_Program &rArr; EEPROM_ProgramUpto4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayIp_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveInt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>NeoWay_UartRec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, neoway_gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[a1]"></a>NeoWay_Rtc1s</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NeoWay_Rtc1s
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Connet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Event
</UL>

<P><STRONG><a name="[b7]"></a>NeoWay_Rtc1ms</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NeoWay_Rtc1ms &rArr; NeoWay_Rec1ms &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rec1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Isr
</UL>

<P><STRONG><a name="[a6]"></a>Delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, neoway_gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Module
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol_Stack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Authentication
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPPP_Connet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[cd]"></a>Write_Ip</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Write_Ip &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
</UL>

<P><STRONG><a name="[d9]"></a>NeoWay_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = NeoWay_Init &rArr; BuildTCP_Connet &rArr; Write_Ip &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol_Stack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPDP_Format
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Authentication
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPPP_Connet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot_Module
</UL>

<P><STRONG><a name="[ab]"></a>TcpSend_Date</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TcpSend_Date &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendDate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>Gprs_Send_Date</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, neoway_gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSend_Date
</UL>

<P><STRONG><a name="[a7]"></a>ModuleBack_Code</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ModuleBack_Code &rArr; ReceiveTCP_Date &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRec_Date
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>ReBootHardware_Module</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReBootHardware_Module &rArr; PowerOff_Module &rArr; GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Module
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Module
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Empty_Par
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot_Module
</UL>

<P><STRONG><a name="[a8]"></a>ReBoot_Module</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ReBoot_Module &rArr; NeoWay_Init &rArr; BuildTCP_Connet &rArr; Write_Ip &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootSofeware_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>GprsRec_Date</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gprs_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBack_Code
</UL>

<P><STRONG><a name="[a0]"></a>Gprs_1SEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gprs_1SEvent &rArr; Gprs_FirstOpenEvent &rArr; Send_FirstOpen &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_FirstOpenEvent
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_HeartbeatEvent
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_AlarmEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Event
</UL>

<P><STRONG><a name="[ac]"></a>Gprs_StartCodeEvent</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gprs_StartCodeEvent &rArr; SendMaster_Date &rArr; UART_SendWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMaster_Date
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMaster_KeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Gprs_ReceiveEvent</STRONG> (Thumb, 222 bytes, Stack size 144 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Gprs_ReceiveEvent &rArr; Read_AckCmd &rArr; Send_InquireInfo &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerToGprs_ChangeMean
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Size
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AckCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Init_Gprs_Device</STRONG> (Thumb, 244 bytes, Stack size 44 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_Gprs_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>ConnetBoard_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, connet_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConnetBoard_Init &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveInt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>SendMaster_Date</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, connet_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendMaster_Date &rArr; UART_SendWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecMaster_Uart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_StartCodeEvent
</UL>

<P><STRONG><a name="[b4]"></a>RecMaster_Uart</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, connet_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RecMaster_Uart &rArr; SendMaster_Date &rArr; UART_SendWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMaster_Date
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[a9]"></a>SendMaster_KeyValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, connet_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_StartCodeEvent
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AdcBuff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol_Stack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Authentication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBack_Code
</UL>

<P><STRONG><a name="[db]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
</UL>

<P><STRONG><a name="[d1]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPPP_Connet
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[150]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[105]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[111]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[151]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[152]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[153]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[155]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[35]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_test
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol_Stack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Authentication
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPPP_Connet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendDate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rec1ms
</UL>

<P><STRONG><a name="[109]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f4]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs_protocol.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AckCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_WEB
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecMaster_Uart
</UL>

<P><STRONG><a name="[117]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10f]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[110]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[157]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[114]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[dd]"></a>pow</STRONG> (Thumb, 2526 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCP_Date
</UL>

<P><STRONG><a name="[115]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>OSC_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FEI
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FBI
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FBI
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FEI
</UL>

<P><STRONG><a name="[92]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[93]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[95]"></a>PIT_ChannelDisable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[96]"></a>PIT_ChannelDisableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[97]"></a>PIT_ChannelDisableChain</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[98]"></a>PIT_ChannelClrFlags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch0Isr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch1Isr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[43]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[44]"></a>RTC_ClrFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Isr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[ae]"></a>UART_ReadDataReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[b2]"></a>UART_WriteDataReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[b3]"></a>UART_DisableTxBuffEmptyInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uartapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[b1]"></a>UART_IsTxBuffEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uartapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[af]"></a>UART_IsRxBuffFull</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uartapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[bc]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Init
</UL>

<P><STRONG><a name="[c2]"></a>NeoWayIp_Init</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NeoWayIp_Init &rArr; EEPROM_Program &rArr; EEPROM_ProgramUpto4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseSector
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
</UL>

<P><STRONG><a name="[c6]"></a>NeoWay_Rec1ms</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NeoWay_Rec1ms &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rtc1ms
</UL>

<P><STRONG><a name="[c7]"></a>Protect_Connet</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, neoway_gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Rtc1s
</UL>

<P><STRONG><a name="[c8]"></a>NeoWay_SendString</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendWait
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cgsn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cimi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWork_Login
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Strength
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol_Stack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPDP_Format
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Authentication
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPPP_Connet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTCP_Connet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[ca]"></a>NeoWay_SendDate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NeoWay_SendDate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendWait
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[cb]"></a>itoa</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ip
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSend_Date
</UL>

<P><STRONG><a name="[ce]"></a>BuildTCP_Connet</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BuildTCP_Connet &rArr; Write_Ip &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ip
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d0]"></a>BuildPPP_Connet</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BuildPPP_Connet &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d2]"></a>User_Authentication</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = User_Authentication &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d3]"></a>SetPDP_Format</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetPDP_Format &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d4]"></a>SetProtocol_Stack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetProtocol_Stack &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d5]"></a>Signal_Strength</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Signal_Strength &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d6]"></a>NetWork_Login</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NetWork_Login &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d7]"></a>Get_Cimi</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Cimi &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[d8]"></a>Get_Cgsn</STRONG> (Thumb, 976 bytes, Stack size 16 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Cgsn &rArr; NeoWay_SendString &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWay_Init
</UL>

<P><STRONG><a name="[da]"></a>ReceiveTCP_Date</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ReceiveTCP_Date &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBack_Code
</UL>

<P><STRONG><a name="[e2]"></a>Empty_Par</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Empty_Par
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootSofeware_Module
</UL>

<P><STRONG><a name="[e3]"></a>PowerOn_Module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerOn_Module &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootSofeware_Module
</UL>

<P><STRONG><a name="[e4]"></a>PowerOff_Module</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerOff_Module &rArr; GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootHardware_Module
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBootSofeware_Module
</UL>

<P><STRONG><a name="[e6]"></a>ReBootSofeware_Module</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReBootSofeware_Module &rArr; PowerOff_Module &rArr; GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Module
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Module
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Empty_Par
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot_Module
</UL>

<P><STRONG><a name="[c5]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, neoway_gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeoWayBoard_Init
</UL>

<P><STRONG><a name="[e7]"></a>GprsSend_Date</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Send_Date
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>

<P><STRONG><a name="[ea]"></a>GprsToServer_ChangeMean</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GprsToServer_ChangeMean
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>

<P><STRONG><a name="[e9]"></a>Group_SendData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsToServer_ChangeMean
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSend_Date
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_InquireInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FirstOpen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Alarm
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[ec]"></a>crc16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_InquireInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FirstOpen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Alarm
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[eb]"></a>Send_Alarm</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Send_Alarm &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_AlarmEvent
</UL>

<P><STRONG><a name="[ed]"></a>Gprs_AlarmEvent</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gprs_AlarmEvent &rArr; Send_Alarm &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_1SEvent
</UL>

<P><STRONG><a name="[ee]"></a>Send_Heartbeat</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_Heartbeat &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_HeartbeatEvent
</UL>

<P><STRONG><a name="[ef]"></a>Gprs_HeartbeatEvent</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gprs_HeartbeatEvent &rArr; Send_Heartbeat &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinToggle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_1SEvent
</UL>

<P><STRONG><a name="[f0]"></a>Send_FirstOpen</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_FirstOpen &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_FirstOpenEvent
</UL>

<P><STRONG><a name="[f1]"></a>Gprs_FirstOpenEvent</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gprs_FirstOpenEvent &rArr; Send_FirstOpen &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FirstOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_1SEvent
</UL>

<P><STRONG><a name="[f9]"></a>Matching_Coll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gprs_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
</UL>

<P><STRONG><a name="[f8]"></a>Matching_SET</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gprs_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
</UL>

<P><STRONG><a name="[f7]"></a>Matching_ALA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gprs_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
</UL>

<P><STRONG><a name="[f3]"></a>Matching_WEB</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Matching_WEB &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
</UL>

<P><STRONG><a name="[f6]"></a>Matching_DEV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gprs_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
</UL>

<P><STRONG><a name="[f5]"></a>Head_SearchAddr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Head_SearchAddr &rArr; Matching_WEB &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_DEV
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_WEB
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_ALA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_SET
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matching_Coll
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_InquireInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetInfo
</UL>

<P><STRONG><a name="[fb]"></a>Monitor_Quantity</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Monitor_Quantity
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_InquireInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetInfo
</UL>

<P><STRONG><a name="[fa]"></a>Send_SetInfo</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Send_SetInfo &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Quantity
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AckCmd
</UL>

<P><STRONG><a name="[fc]"></a>Send_InquireInfo</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Send_InquireInfo &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Quantity
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_SearchAddr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Group_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AckCmd
</UL>

<P><STRONG><a name="[fd]"></a>Read_AckCmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_AckCmd &rArr; Send_InquireInfo &rArr; Group_SendData &rArr; GprsSend_Date
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_InquireInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[100]"></a>Check_Size</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[ff]"></a>ServerToGprs_ChangeMean</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, gprs_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ServerToGprs_ChangeMean
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_ReceiveEvent
</UL>

<P><STRONG><a name="[101]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, connet_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnetBoard_Init
</UL>

<P><STRONG><a name="[10e]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[113]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[112]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
