<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Motor_driver.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Motor_driver.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Oct 25 18:34:15 2016
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Board_Init &rArr; sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[37]">UART_PutChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">UART_PutChar</a><BR>
 <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACMP0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[20]">ACMP1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[5]">Adc_FifoIsr</a> from adcapp.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[5]">Adc_FifoIsr</a> from adcapp.o(.text) referenced from init.o(.text)
 <LI><a href="#[1c]">FTM0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1d]">FTM1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1e]">FTM2_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[10]">FTMRH_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[26]">ICS_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[12]">IRQ_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[23]">KBI0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[24]">KBI1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[11]">LVD_LVW_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[21]">PIT_CH0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[22]">PIT_CH1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[b]">Reserved16_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[c]">Reserved17_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[d]">Reserved18_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[e]">Reserved19_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[14]">Reserved25_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[28]">Reserved45_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[29]">Reserved46_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2a]">Reserved47_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke02z2.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[6]">Rtc_Isr</a> from rtcapp.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from start.o(.text) referenced from startup_mke02z2.o(.text)
 <LI><a href="#[17]">UART0_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2]">UART0_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[3]">UART1_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[19]">UART2_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[4]">UART2_Isr</a> from uart.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[2e]">UART_HandleInt</a> from uartapp.o(.text) referenced from init.o(.text)
 <LI><a href="#[27]">Watchdog_IRQHandler</a> from startup_mke02z2.o(.text) referenced from startup_mke02z2.o(RESET)
 <LI><a href="#[2d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mke02z2.o(.text)
 <LI><a href="#[1]">default_isr</a> from vectors.o(.text) referenced 41 times from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[2f]">fputc</a> from io.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2b]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[30]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[92]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[93]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[94]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[95]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[32]"></a>assert_failed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[34]"></a>in_char</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>

<P><STRONG><a name="[36]"></a>out_char</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[96]"></a>char_present</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[1]"></a>default_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[97]"></a>abort_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>hard_fault_handler_c</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
<LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[39]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[3a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[3b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FTMRH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>KBI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>KBI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Reserved47_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mke02z2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, start.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DisableWDOGEnableUpdate
</UL>

<P><STRONG><a name="[9a]"></a>cpu_identify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, start.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>flash_identify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, start.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; WDOG_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mke02z2.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>ADC_SetFifoLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[43]"></a>ADC_SetMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[42]"></a>ADC_SelectClockDivide</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[41]"></a>ADC_SelectClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[40]"></a>ADC_Init</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClockDivide
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetFifoLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[46]"></a>ADC_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollRead
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AdcBuff
</UL>

<P><STRONG><a name="[45]"></a>ADC_DeInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[47]"></a>ADC_PollRead</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[84]"></a>ADC_SetCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[9c]"></a>ADC_VrefSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ADC_Isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; Board_Init &rArr; sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6]"></a>Rtc_Isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtcapp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[9e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[49]"></a>print_sys_log</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_sys_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_ReadID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetStatus
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[4c]"></a>UART_InitPrint</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[4e]"></a>sysinit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Trim
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[52]"></a>end_test</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[53]"></a>FLASH_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[56]"></a>FLASH_LaunchCMD</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetUserMarginLevel
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyBackdoorKey
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseSector
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Program1Byte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseVerifySection
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOnce
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOnce
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAll
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifyAll
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifySection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseVerifyBlock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseBlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unsecure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramUpto4Bytes
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
</UL>

<P><STRONG><a name="[55]"></a>FLASH_Program1LongWord</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
</UL>

<P><STRONG><a name="[57]"></a>FLASH_Program2LongWords</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
</UL>

<P><STRONG><a name="[58]"></a>FLASH_Program</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
</UL>

<P><STRONG><a name="[59]"></a>FLASH_EraseSector</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[5a]"></a>EEPROM_ProgramUpto4Bytes</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Program
</UL>

<P><STRONG><a name="[5b]"></a>EEPROM_Program</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramUpto4Bytes
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_Unsecure</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_EraseBlock</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_EraseVerifyBlock</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_EraseVerifySection</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[60]"></a>FLASH_EraseVerifyAll</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[61]"></a>FLASH_EraseAll</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[62]"></a>FLASH_ProgramOnce</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[63]"></a>FLASH_ReadOnce</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[64]"></a>EEPROM_EraseVerifySection</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[65]"></a>EEPROM_Program1Byte</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[66]"></a>EEPROM_EraseSector</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[a0]"></a>EEPROM_Program1Byte_NoWait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>EEPROM_ProgramUpto4Bytes_NoWait</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>EEPROM_EraseSector_NoWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>FLASH_EraseBlock_NoWait</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>FLASH_VerifyBackdoorKey</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[68]"></a>FLASH_SetUserMarginLevel</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>

<P><STRONG><a name="[a4]"></a>FLASH_CheckErrStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ICS_SetClkDivider</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[6a]"></a>OSC_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FEE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FBE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[69]"></a>FEI_to_FEE</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FEE &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[a5]"></a>FEI_to_FBI</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>FEI_to_FBE</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[6d]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FBE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[6e]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FEE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[6f]"></a>FEE_to_FEI</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[71]"></a>FEE_to_FBI</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[a6]"></a>FEE_to_FBE</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>FBI_to_FBE</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[73]"></a>FBI_to_FEE</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[a7]"></a>FBI_to_FBILP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>FBI_to_FEI</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>FBE_to_FBI</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[a9]"></a>FBE_to_FEE</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>FBE_to_FEI</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[aa]"></a>FBE_to_FBELP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>FBELP_to_FBE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>FBILP_to_FBI</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>ICS_Trim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[51]"></a>ICS_Init</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[ad]"></a>ICS_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>OSC_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RTC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[af]"></a>RTC_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>RTC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>

<P><STRONG><a name="[79]"></a>RTC_Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>

<P><STRONG><a name="[50]"></a>SIM_Init</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, sim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[b0]"></a>SIM_SetClockGating</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sim.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>SIM_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>

<P><STRONG><a name="[4b]"></a>SIM_ReadID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
</UL>

<P><STRONG><a name="[4d]"></a>UART_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitPrint
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[35]"></a>UART_GetChar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_char
</UL>

<P><STRONG><a name="[37]"></a>UART_PutChar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AdcBuff
</UL>

<P><STRONG><a name="[7a]"></a>UART_SetBaudrate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[7b]"></a>UART_EnableInterrupt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7c]"></a>UART_DisableInterrupt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7e]"></a>UART_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>

<P><STRONG><a name="[7d]"></a>UART_CheckFlag</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_CheckFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[b1]"></a>UART_SendWait</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>UART_ReceiveWait</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>UART_WaitTxComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>UART_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[2]"></a>UART0_Isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[3]"></a>UART1_Isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[4]"></a>UART2_Isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[3f]"></a>WDOG_Disable</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDOG_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3e]"></a>WDOG_DisableWDOGEnableUpdate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[b4]"></a>WDOG_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>WDOG_Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>WDOG_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>WDOG_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>WDOG_EnableUpdate</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>WDOG_DisableUpdate</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>UART_ReceiveInt</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, uartapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_ReceiveInt
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[7f]"></a>Deal_Receive_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uartapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Deal_Receive_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleInt
</UL>

<P><STRONG><a name="[2e]"></a>UART_HandleInt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uartapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_HandleInt &rArr; Deal_Receive_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Receive_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>Adc_FifoIsr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, adcapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adc_FifoIsr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
<LI> init.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>Read_AdcBuff</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, adcapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>

<P><STRONG><a name="[81]"></a>Rtc_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rtc_Init &rArr; RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[83]"></a>Adc_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Adc_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetCallBack
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[85]"></a>Uart_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uart_Init &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveInt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[ba]"></a>Gpio_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>Board_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Board_Init &rArr; sysinit &rArr; UART_InitPrint &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[33]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_test
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sys_log
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Receive_data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>OSC_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FEI
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FBI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FBI
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FEI
</UL>

<P><STRONG><a name="[77]"></a>RTC_ClrFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Isr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[82]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[8d]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
